/* tslint:disable */
/* eslint-disable */
/**
 * Cashflow API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GameResponseModel,
  ProfessionModel,
} from '../models/index';
import {
    GameResponseModelFromJSON,
    GameResponseModelToJSON,
    ProfessionModelFromJSON,
    ProfessionModelToJSON,
} from '../models/index';

export interface HubsGameHubBuyCharityPostRequest {
    gameCode?: string;
    playerId?: string;
}

export interface HubsGameHubBuyDealPostRequest {
    gameCode?: string;
    playerId?: string;
}

export interface HubsGameHubCreateGamePostRequest {
    playerName?: string;
}

export interface HubsGameHubEndTurnPostRequest {
    gameCode?: string;
    playerId?: string;
}

export interface HubsGameHubGetDealPostRequest {
    gameCode?: string;
    playerId?: string;
    isBig?: boolean;
}

export interface HubsGameHubJoinGamePostRequest {
    playerName?: string;
    gameCode?: string;
}

export interface HubsGameHubMarketPassPostRequest {
    gameCode?: string;
    playerId?: string;
}

export interface HubsGameHubMovePlayerPostRequest {
    gameCode?: string;
    playerId?: string;
    spacesToMove?: number;
}

export interface HubsGameHubSelectProfessionPostRequest {
    gameCode?: string;
    playerId?: string;
    profession?: ProfessionModel;
}

export interface HubsGameHubSellDealPostRequest {
    gameCode?: string;
    playerId?: string;
}

export interface HubsGameHubSellToMarketPostRequest {
    gameCode?: string;
    playerId?: string;
    assetId?: string;
}

/**
 * 
 */
export class GameHubApi extends runtime.BaseAPI {

    /**
     */
    async hubsGameHubBuyCharityPostRaw(requestParameters: HubsGameHubBuyCharityPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['gameCode'] != null) {
            queryParameters['gameCode'] = requestParameters['gameCode'];
        }

        if (requestParameters['playerId'] != null) {
            queryParameters['playerId'] = requestParameters['playerId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/hubs/GameHub/BuyCharity`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async hubsGameHubBuyCharityPost(requestParameters: HubsGameHubBuyCharityPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.hubsGameHubBuyCharityPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async hubsGameHubBuyDealPostRaw(requestParameters: HubsGameHubBuyDealPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['gameCode'] != null) {
            queryParameters['gameCode'] = requestParameters['gameCode'];
        }

        if (requestParameters['playerId'] != null) {
            queryParameters['playerId'] = requestParameters['playerId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/hubs/GameHub/BuyDeal`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async hubsGameHubBuyDealPost(requestParameters: HubsGameHubBuyDealPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.hubsGameHubBuyDealPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async hubsGameHubCreateGamePostRaw(requestParameters: HubsGameHubCreateGamePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters['playerName'] != null) {
            queryParameters['playerName'] = requestParameters['playerName'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/hubs/GameHub/CreateGame`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async hubsGameHubCreateGamePost(requestParameters: HubsGameHubCreateGamePostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameResponseModel> {
        const response = await this.hubsGameHubCreateGamePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async hubsGameHubEndTurnPostRaw(requestParameters: HubsGameHubEndTurnPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['gameCode'] != null) {
            queryParameters['gameCode'] = requestParameters['gameCode'];
        }

        if (requestParameters['playerId'] != null) {
            queryParameters['playerId'] = requestParameters['playerId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/hubs/GameHub/EndTurn`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async hubsGameHubEndTurnPost(requestParameters: HubsGameHubEndTurnPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.hubsGameHubEndTurnPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async hubsGameHubGetDealPostRaw(requestParameters: HubsGameHubGetDealPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['gameCode'] != null) {
            queryParameters['gameCode'] = requestParameters['gameCode'];
        }

        if (requestParameters['playerId'] != null) {
            queryParameters['playerId'] = requestParameters['playerId'];
        }

        if (requestParameters['isBig'] != null) {
            queryParameters['isBig'] = requestParameters['isBig'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/hubs/GameHub/GetDeal`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async hubsGameHubGetDealPost(requestParameters: HubsGameHubGetDealPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.hubsGameHubGetDealPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async hubsGameHubJoinGamePostRaw(requestParameters: HubsGameHubJoinGamePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters['playerName'] != null) {
            queryParameters['playerName'] = requestParameters['playerName'];
        }

        if (requestParameters['gameCode'] != null) {
            queryParameters['gameCode'] = requestParameters['gameCode'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/hubs/GameHub/JoinGame`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async hubsGameHubJoinGamePost(requestParameters: HubsGameHubJoinGamePostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameResponseModel> {
        const response = await this.hubsGameHubJoinGamePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async hubsGameHubMarketPassPostRaw(requestParameters: HubsGameHubMarketPassPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['gameCode'] != null) {
            queryParameters['gameCode'] = requestParameters['gameCode'];
        }

        if (requestParameters['playerId'] != null) {
            queryParameters['playerId'] = requestParameters['playerId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/hubs/GameHub/MarketPass`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async hubsGameHubMarketPassPost(requestParameters: HubsGameHubMarketPassPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.hubsGameHubMarketPassPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async hubsGameHubMovePlayerPostRaw(requestParameters: HubsGameHubMovePlayerPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['gameCode'] != null) {
            queryParameters['gameCode'] = requestParameters['gameCode'];
        }

        if (requestParameters['playerId'] != null) {
            queryParameters['playerId'] = requestParameters['playerId'];
        }

        if (requestParameters['spacesToMove'] != null) {
            queryParameters['spacesToMove'] = requestParameters['spacesToMove'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/hubs/GameHub/MovePlayer`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async hubsGameHubMovePlayerPost(requestParameters: HubsGameHubMovePlayerPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.hubsGameHubMovePlayerPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async hubsGameHubSelectProfessionPostRaw(requestParameters: HubsGameHubSelectProfessionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['gameCode'] != null) {
            queryParameters['gameCode'] = requestParameters['gameCode'];
        }

        if (requestParameters['playerId'] != null) {
            queryParameters['playerId'] = requestParameters['playerId'];
        }

        if (requestParameters['profession'] != null) {
            queryParameters['profession'] = requestParameters['profession'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/hubs/GameHub/SelectProfession`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async hubsGameHubSelectProfessionPost(requestParameters: HubsGameHubSelectProfessionPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.hubsGameHubSelectProfessionPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async hubsGameHubSellDealPostRaw(requestParameters: HubsGameHubSellDealPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['gameCode'] != null) {
            queryParameters['gameCode'] = requestParameters['gameCode'];
        }

        if (requestParameters['playerId'] != null) {
            queryParameters['playerId'] = requestParameters['playerId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/hubs/GameHub/SellDeal`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async hubsGameHubSellDealPost(requestParameters: HubsGameHubSellDealPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.hubsGameHubSellDealPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async hubsGameHubSellToMarketPostRaw(requestParameters: HubsGameHubSellToMarketPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['gameCode'] != null) {
            queryParameters['gameCode'] = requestParameters['gameCode'];
        }

        if (requestParameters['playerId'] != null) {
            queryParameters['playerId'] = requestParameters['playerId'];
        }

        if (requestParameters['assetId'] != null) {
            queryParameters['assetId'] = requestParameters['assetId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/hubs/GameHub/SellToMarket`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async hubsGameHubSellToMarketPost(requestParameters: HubsGameHubSellToMarketPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.hubsGameHubSellToMarketPostRaw(requestParameters, initOverrides);
    }

}
